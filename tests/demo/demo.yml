config:
    name: "setup and reset all."
    id: setup_and_reset
    variables:
        user_agent: 'iOS/10.3'
        device_sn: "TESTCASE_SETUP_XXX"
        os_platform: 'ios'
        app_version: '2.8.6'
    base_url: "http://127.0.0.1:5000"
    verify: False
    export:
        - token

teststeps:
-
    name: get token (setup)
    variables:
        user_agent: 'iOS/10.3'
        device_sn: $device_sn
        os_platform: 'ios'
        app_version: '2.8.6'
    request:
        url: /api/get-token
        method: POST
        headers:
            user_agent: $user_agent
            device_sn: $device_sn
            os_platform: $os_platform
            app_version: $app_version
            Content-Type: "application/json"
            device_sn: $device_sn
        json:
            # sign: ${get_sign($device_sn, $os_platform, $app_version)}
            # sign: "${get_sign_v2([$device_sn, $os_platform, $app_version])}"
            # sign: ${get_sign_v2([$device_sn, $os_platform, $app_version])}
            sign: "${get_sign_v3({device_sn: $device_sn, os_platform: $os_platform, app_version: $app_version})}"
            # sign: "${get_sign_v3({'device_sn': $device_sn, 'os_platform': $os_platform, 'app_version': $app_version})}"
            # sign: "${get_sign_v3({\"device_sn\": $device_sn, \"os_platform\": $os_platform, \"app_version\": $app_version})}"
    extract:
        - token: content.token
        - resp: content
    validate:
        - eq: ["status_code", 200]
        - len_eq: ["content.token", 16]
        - eq: ["${validate_token($token)}", True]
        - eq: ["${validate_token(content.token)}", True]
        - eq: ["${validate_token_v2(content)}", True]
        - eq: ["${validate_token($resp.token)}", True]
        - eq:
          - ${validate_token($resp.token)}
          - True
    script:
        - assert status_code ==  200
        - assert len(content.token) == 16
        - assert ${validate_token($token)} is True
        - assert ${validate_token(content.token)} is True
        - assert ${validate_token_v2(content)} is True
        - assert ${validate_token($resp.token)} is True
        - assert ${validate_token_v3(content)} is True
        - assert content.success is True
        - assert content.token is not None
        # - assert $token is not None
        - assert "$token" is not None
        # - assert len($token) == 16
        - assert len("$token") == 16
        - ${get_sign($device_sn, $os_platform, $app_version)}
        - ${get_sign_v2([$device_sn, $os_platform, $app_version])}
        - '${get_sign_v3({device_sn: $device_sn, os_platform: $os_platform, app_version: $app_version})}'
        - ${get_str()}
        - ${get_int()}
        - ${get_float()}
        - ${get_list()}
        - ${get_dict()}
        - ${get_bool()}
        - ${get_none()}
        - ${get_empty_str()}
        - ${get_empty_list()}
        - ${get_empty_dict()}
        - assert elapsed.total_seconds < 2.0
        - |
            if status_code == 200:
                assert content.success is True
            else:
                assert content.success is False
-
    name: reset all users
    variables:
        token: $token
    request:
        url: /api/reset-all
        method: GET
        headers:
            Content-Type: "application/json"
            device_sn: $device_sn
            token: $token
    validate:
        - eq: ["status_code", 200]
        - eq: ["body.success", true]