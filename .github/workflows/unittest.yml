name: unittest

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  unittest:
    name: unittest - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        python-version: ["3.7","3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          # Python 3.7 在新版本的 Ubuntu 上不支持，所以需要排除
          - os: ubuntu-latest
            python-version: "3.7"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry (Cross-platform)
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run compatibility tests
      run: |
        # 基础功能测试
        poetry run python -c "import apimeter; print(f'ApiMeter version: {apimeter.__version__}')"
        poetry run python -c "import sys; print(f'Python version: {sys.version}')"
        
        # 核心模块导入测试
        poetry run python -c "from apimeter.parser import Hashable; print('Hashable imported successfully')"
        poetry run python -c "from apimeter.utils import collections_deque; print('collections_deque imported successfully')"
        
    - name: Run tests with coverage
      run: |
        poetry run python -m apimeter.cli --version
        poetry run python -m apimeter.cli --help
        poetry run coverage run --source=apimeter -m unittest discover tests/
        poetry run coverage xml
        poetry run coverage report -m
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
